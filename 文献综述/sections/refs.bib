@article{7390282,
  author   = {Wong, W. Eric and Gao, Ruizhi and Li, Yihao and Abreu, Rui and Wotawa, Franz},
  journal  = {IEEE Transactions on Software Engineering},
  title    = {A Survey on Software Fault Localization},
  year     = {2016},
  volume   = {42},
  number   = {8},
  pages    = {707-740},
  keywords = {Debugging;Software engineering;Computer bugs;Software debugging;Fault diagnosis;Complexity theory;Software fault localization;program debugging;software testing;execution trace;suspicious code;survey},
  doi      = {10.1109/TSE.2016.2521368}
}
@inproceedings{6227210,
  author    = {Zhou, Jian and Zhang, Hongyu and Lo, David},
  booktitle = {2012 34th International Conference on Software Engineering (ICSE)},
  title     = {Where should the bugs be fixed? More accurate information retrieval-based bug localization based on bug reports},
  year      = {2012},
  volume    = {},
  number    = {},
  pages     = {14-24},
  keywords  = {Computer bugs;Vectors;Mathematical model;Equations;Information retrieval;Indexing;Computational modeling;bug localization;information retrieval;feature location;bug reports},
  doi       = {10.1109/ICSE.2012.6227210}
}
@inproceedings{6693093,
  author    = {Saha, Ripon K. and Lease, Matthew and Khurshid, Sarfraz and Perry, Dewayne E.},
  booktitle = {2013 28th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
  title     = {Improving bug localization using structured information retrieval},
  year      = {2013},
  volume    = {},
  number    = {},
  pages     = {345-355},
  keywords  = {Computer bugs;Measurement;Accuracy;Information retrieval;Indexing;Java;Mathematical model;Bug localization;information retrieval;search},
  doi       = {10.1109/ASE.2013.6693093}
}
@inproceedings{6747185,
  author    = {Hill, Emily and Sisman, Bunyamin and Kak, Avinash},
  booktitle = {2014 Software Evolution Week - IEEE Conference on Software Maintenance, Reengineering, and Reverse Engineering (CSMR-WCRE)},
  title     = {On the use of positional proximity in IR-based feature location},
  year      = {2014},
  volume    = {},
  number    = {},
  pages     = {318-322},
  keywords  = {Natural languages;Information retrieval;Software maintenance;Markov random fields;Java;Semantics;feature location;source code search;software maintenance},
  doi       = {10.1109/CSMR-WCRE.2014.6747185}
}
@book{hill2010integrating,
  title     = {Integrating natural language and program structure information to improve software search and exploration},
  author    = {Hill, Emily},
  year      = {2010},
  publisher = {University of Delaware}
}
@inproceedings{6976082,
  author    = {Saha, Ripon K. and Lawall, Julia and Khurshid, Sarfraz and Perry, Dewayne E.},
  booktitle = {2014 IEEE International Conference on Software Maintenance and Evolution},
  title     = {On the Effectiveness of Information Retrieval Based Bug Localization for C Programs},
  year      = {2014},
  volume    = {},
  number    = {},
  pages     = {161-170},
  keywords  = {Java;Linux;Kernel;Accuracy;Measurement;Bug Localization;Information Retrieval;Search},
  doi       = {10.1109/ICSME.2014.38}
}
@inproceedings{6982639,
  author    = {Le, Tien-Duy B. and Thung, Ferdian and Lo, David},
  booktitle = {2014 IEEE 25th International Symposium on Software Reliability Engineering},
  title     = {Predicting Effectiveness of IR-Based Bug Localization Techniques},
  year      = {2014},
  volume    = {},
  number    = {},
  pages     = {335-345},
  keywords  = {Feature extraction;Predictive models;Support vector machines;Training;Computational modeling;Computer bugs;Debugging;Text Classification;Information Retrieval;Bug Reports;Bug Localization;Effectiveness Prediction},
  doi       = {10.1109/ISSRE.2014.39}
}
@inproceedings{7272945,
  author    = {Zhao, Fei and Tang, Yaming and Yang, Yibiao and Lu, Hongmin and Zhou, Yuming and Xu, Baowen},
  booktitle = {2015 IEEE International Conference on Software Quality, Reliability and Security},
  title     = {Is Learning-to-Rank Cost-Effective in Recommending Relevant Files for Bug Localization?},
  year      = {2015},
  volume    = {},
  number    = {},
  pages     = {298-303},
  keywords  = {Inspection;Computer bugs;Standards;Context;Measurement;Software;Information retrieval;bug localization;bug reports;effort-aware;learning-to-rank;empirical study},
  doi       = {10.1109/QRS.2015.49}
}
@inproceedings{10.1145/2635868.2635874,
  author    = {Ye, Xin and Bunescu, Razvan and Liu, Chang},
  title     = {Learning to rank relevant files for bug reports using domain knowledge},
  year      = {2014},
  isbn      = {9781450330565},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/2635868.2635874},
  doi       = {10.1145/2635868.2635874},
  abstract  = {When a new bug report is received, developers usually need to reproduce the bug and perform code reviews to find the cause, a process that can be tedious and time consuming. A tool for ranking all the source files of a project with respect to how likely they are to contain the cause of the bug would enable developers to narrow down their search and potentially could lead to a substantial increase in productivity. This paper introduces an adaptive ranking approach that leverages domain knowledge through functional decompositions of source code files into methods, API descriptions of library components used in the code, the bug-fixing history, and the code change history. Given a bug report, the ranking score of each source file is computed as a weighted combination of an array of features encoding domain knowledge, where the weights are trained automatically on previously solved bug reports using a learning-to-rank technique. We evaluated our system on six large scale open source Java projects, using the before-fix version of the project for every bug report. The experimental results show that the newly introduced learning-to-rank approach significantly outperforms two recent state-of-the-art methods in recommending relevant files for bug reports. In particular, our method makes correct recommendations within the top 10 ranked source files for over 70\% of the bug reports in the Eclipse Platform and Tomcat projects.},
  booktitle = {Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering},
  pages     = {689â€“699},
  numpages  = {11},
  keywords  = {software maintenance, learning to rank, bug reports},
  location  = {Hong Kong, China},
  series    = {FSE 2014}
}
@inproceedings{7467300,
  author    = {Youm, Klaus Changsun and Ahn, June and Kim, Jeongho and Lee, Eunseok},
  booktitle = {2015 Asia-Pacific Software Engineering Conference (APSEC)},
  title     = {Bug Localization Based on Code Change Histories and Bug Reports},
  year      = {2015},
  volume    = {},
  number    = {},
  pages     = {190-197},
  keywords  = {History;Computer bugs;Information retrieval;Software maintenance;Indexes;Data mining;bug localization;fault localization;information retrieval;bug report;stack traces;code change history},
  doi       = {10.1109/APSEC.2015.23}
}
@inproceedings{7582764,
  author    = {Wen, Ming and Wu, Rongxin and Cheung, Shing-Chi},
  booktitle = {2016 31st IEEE/ACM International Conference on Automated Software Engineering (ASE)},
  title     = {Locus: Locating bugs from software changes},
  year      = {2016},
  volume    = {},
  number    = {},
  pages     = {262-273},
  keywords  = {Computer bugs;Software;Debugging;History;Information retrieval;Natural languages;Manuals;bug localization;software changes;information retrieval;software analytics},
  doi       = {}
}
@inproceedings{7816459,
  author    = {Zhang, Yun and Lo, David and Xia, Xin and Le, Tien-Duy B. and Scanniello, Giuseppe and Sun, Jianling},
  booktitle = {2016 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
  title     = {Inferring Links between Concerns and Methods with Multi-abstraction Vector Space Model},
  year      = {2016},
  volume    = {},
  number    = {},
  pages     = {110-121},
  keywords  = {Computer bugs;Genetic algorithms;Computational modeling;Java;Software systems;Sociology;Statistics;Concern Localization;Multi-Abstraction;Text Retrieval;Topic Modeling},
  doi       = {10.1109/ICSME.2016.51}
}
@inproceedings{7961521,
  author    = {Dao, Tung and Zhang, Lingming and Meng, Na},
  booktitle = {2017 IEEE/ACM 25th International Conference on Program Comprehension (ICPC)},
  title     = {How Does Execution Information Help with Information-Retrieval Based Bug Localization?},
  year      = {2017},
  volume    = {},
  number    = {},
  pages     = {241-250},
  keywords  = {Computer bugs;Tools;Instruments;Computer science;History;Runtime;Tuning},
  doi       = {10.1109/ICPC.2017.29}
}
@inproceedings{8449523,
  author    = {Kim, Misoo and Lee, Eunseok},
  booktitle = {2018 IEEE/ACM 40th International Conference on Software Engineering: Companion (ICSE-Companion)},
  title     = {Poster: Are Information Retrieval-Based Bug Localization Techniques Trustworthy?},
  year      = {2018},
  volume    = {},
  number    = {},
  pages     = {248-249},
  keywords  = {Computer bugs;Performance evaluation;Software;Production;Software engineering;History;Reliability;Empirical Study;Test File;Bug Report;Information Retrieval-based Bug Localization;Trustworthness},
  doi       = {}
}
@inproceedings{8449572,
  author    = {Rahman, Mohammad Masudur and Roy, Chanchal},
  booktitle = {2018 IEEE/ACM 40th International Conference on Software Engineering: Companion (ICSE-Companion)},
  title     = {Poster: Improving Bug Localization with Report Quality Dynamics and Query Reformulation},
  year      = {2018},
  volume    = {},
  number    = {},
  pages     = {348-349},
  keywords  = {Computer bugs;Software;Engines;Information retrieval;Software engineering;Noise measurement;Robustness;Debugging automation;bug localization;information retrieval;query reformulation;report quality dynamics},
  doi       = {}
}
@inproceedings{8973028,
  author    = {Takahashi, Aoi and Sae-Lim, Natthawute and Hayashi, Shinpei and Saeki, Motoshi},
  booktitle = {2018 IEEE/ACM 26th International Conference on Program Comprehension (ICPC)},
  title     = {A Preliminary Study on Using Code Smells to Improve Bug Localization},
  year      = {2018},
  volume    = {},
  number    = {},
  pages     = {324-3243},
  keywords  = {bug localization;code smell;information retrieval},
  doi       = {}
}
@article{8736209,
  author   = {Liu, Guangliang and Lu, Yang and Shi, Ke and Chang, Jingfei and Wei, Xing},
  journal  = {IEEE Access},
  title    = {Mapping Bug Reports to Relevant Source Code Files Based on the Vector Space Model and Word Embedding},
  year     = {2019},
  volume   = {7},
  number   = {},
  pages    = {78870-78881},
  keywords = {Computer bugs;Software;Semantics;Tagging;Maintenance engineering;Training;Data mining;Bug localization;information retrieval;surface lexical similarity;semantic similarity;bug report;word embedding},
  doi      = {10.1109/ACCESS.2019.2922686}
}
@inproceedings{8906763,
  author    = {Amasaki, Sousuke and Aman, Hirohisa and Yokogawa, Tomoyuki},
  booktitle = {2019 45th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)},
  title     = {A Comparative Study of Vectorization Methods on BugLocator},
  year      = {2019},
  volume    = {},
  number    = {},
  pages     = {236-243},
  keywords  = {Computer bugs;Software;Lenses;Software engineering;Debugging;Information retrieval;Task analysis;bug localization;vectorization methods;comparative study},
  doi       = {10.1109/SEAA.2019.00045}
}
@inproceedings{10.1145/3213846.3213856,
  author    = {Lee, Jaekwon and Kim, Dongsun and Bissyand\'{e}, Tegawend\'{e} F. and Jung, Woosung and Le Traon, Yves},
  title     = {Bench4BL: reproducibility study on the performance of IR-based bug localization},
  year      = {2018},
  isbn      = {9781450356992},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3213846.3213856},
  doi       = {10.1145/3213846.3213856},
  abstract  = {In recent years, the use of Information Retrieval (IR) techniques to automate the localization of buggy files, given a bug report, has shown promising results. The abundance of approaches in the literature, however, contrasts with the reality of IR-based bug localization (IRBL) adoption by developers (or even by the research community to complement other research approaches). Presumably, this situation is due to the lack of comprehensive evaluations for state-of-the-art approaches which offer insights into the actual performance of the techniques.  We report on a comprehensive reproduction study of six state-of-the-art IRBL techniques. This study applies not only subjects used in existing studies (old subjects) but also 46 new subjects (61,431 Java files and 9,459 bug reports) to the IRBL techniques. In addition, the study compares two different version matching (between bug reports and source code files) strategies to highlight some observations related to performance deterioration. We also vary test file inclusion to investigate the effectiveness of IRBL techniques on test files, or its noise impact on performance. Finally, we assess potential performance gain if duplicate bug reports are leveraged.},
  booktitle = {Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis},
  pages     = {61â€“72},
  numpages  = {12},
  keywords  = {information retrieval, bug localization, Reproducibility studies},
  location  = {Amsterdam, Netherlands},
  series    = {ISSTA 2018}
}
@inproceedings{9462960,
  author    = {Yang, Shouliang and Cao, Junming and Zeng, Hushuang and Shen, Beijun and Zhong, Hao},
  booktitle = {2021 IEEE/ACM 29th International Conference on Program Comprehension (ICPC)},
  title     = {Locating Faulty Methods with a Mixed RNN and Attention Model},
  year      = {2021},
  volume    = {},
  number    = {},
  pages     = {207-218},
  keywords  = {Location awareness;Industries;Recurrent neural networks;Computer bugs;Semantics;Natural languages;Tools;fault localization;code revision graph;recurrent neural network;soft attention},
  doi       = {10.1109/ICPC52881.2021.00028}
}
@inproceedings{10.1145/3183440.3195003,
  author    = {Rahman, Mohammad Masudur and Roy, Chanchai K.},
  title     = {Improving bug localization with report quality dynamics and query reformulation},
  year      = {2018},
  isbn      = {9781450356633},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3183440.3195003},
  doi       = {10.1145/3183440.3195003},
  abstract  = {Recent findings from a user study suggest that IR-based bug localization techniques do not perform well if the bug report lacks rich structured information such as relevant program entity names. On the contrary excessive structured information such as stack traces in the bug report might always not be helpful for the automated bug localization. In this paper, we conduct a large empirical study using 5,500 bug reports from eight subject systems and replicating three existing studies from the literature. Our findings (1) empirically demonstrate how quality dynamics of bug reports affect the performances of IR-based bug localization, and (2) suggest potential ways (e.g., query reformulations) to overcome such limitations.},
  booktitle = {Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings},
  pages     = {348â€“349},
  numpages  = {2},
  location  = {Gothenburg, Sweden},
  series    = {ICSE '18}
}
@inproceedings{9286037,
  author    = {Cao, Junming and Yang, Shouliang and Jiang, Wenhui and Zeng, Hushuang and Shen, Beijun and Zhong, Hao},
  booktitle = {2020 35th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
  title     = {BugPecker: Locating Faulty Methods with Deep Learning on Revision Graphs},
  year      = {2020},
  volume    = {},
  number    = {},
  pages     = {1214-1218},
  abstract  = {Given a bug report of a project, the task of locating the faults of the bug report is called fault localization. To help programmers in the fault localization process, many approaches have been proposed, and have achieved promising results to locate faulty files. However, it is still challenging to locate faulty methods, because many methods are short and do not have sufficient details to determine whether they are faulty. In this paper, we present BugPecker, a novel approach to locate faulty methods based on its deep learning on revision graphs. Its key idea includes (1) building revision graphs and capturing the details of past fixes as much as possible, and (2) discovering relations inside our revision graphs to expand the details for methods and calculating various features to assist our ranking. We have implemented BugPecker, and evaluated it on three open source projects. The early results show that BugPecker achieves a mean average precision (MAP) of 0.263 and mean reciprocal rank (MRR) of 0.291, which improve the prior approaches significantly. For example, BugPecker improves the MAP values of all three projects by five times, compared with two recent approaches such as DNNLoc-m and BLIA 1.5.},
  keywords  = {Deep learning;Computer bugs;Buildings;Task analysis;Software engineering;bug localization;deep learning;revision graph},
  doi       = {},
  issn      = {2643-1572},
  month     = {Sep.}
}
@inproceedings{9610655,
  author    = {Razzaq, Abdul and Buckley, Jim and Patten, James Vincent and Chochlov, Muslim and Sai, Ashish Rajendra},
  booktitle = {2021 IEEE 21st International Working Conference on Source Code Analysis and Manipulation (SCAM)},
  title     = {BoostNSift: A Query Boosting and Code Sifting Technique for Method Level Bug Localization},
  year      = {2021},
  volume    = {},
  number    = {},
  pages     = {81-91},
  keywords  = {Location awareness;Codes;Veins;Conferences;Computer bugs;Software systems;Information retrieval;Bug localization;Code analysis;Software maintenance;Query enhancement;Query boosting;Code Sifting},
  doi       = {10.1109/SCAM52516.2021.00019}
}
@inproceedings{9700273,
  author    = {Kim, Misoo and Kim, Youngkyoung and Lee, Eunseok},
  booktitle = {2021 IEEE 32nd International Symposium on Software Reliability Engineering (ISSRE)},
  title     = {A Novel Automatic Query Expansion with Word Embedding for IR-based Bug Localization},
  year      = {2021},
  volume    = {},
  number    = {},
  pages     = {276-287},
  keywords  = {Location awareness;Computer bugs;Software reliability;Automatic query expansion;Bug report;Infor-mation retrieval-based bug localization;Word embedding},
  doi       = {10.1109/ISSRE52982.2021.00038}
}
@article{9653844,
  author   = {Qiu, Fangcheng and Gao, Zhipeng and Xia, Xin and Lo, David and Grundy, John and Wang, Xinyu},
  journal  = {IEEE Transactions on Software Engineering},
  title    = {Deep Just-In-Time Defect Localization},
  year     = {2022},
  volume   = {48},
  number   = {12},
  pages    = {5068-5086},
  keywords = {Codes;Location awareness;Computer bugs;Task analysis;Software;Training;Context modeling;Defect localization;just-in-time;software naturalness;deep learning},
  doi      = {10.1109/TSE.2021.3135875}
}
@inproceedings{10.1145/3106237.3106290,
  author    = {Hellendoorn, Vincent J. and Devanbu, Premkumar},
  title     = {Are deep neural networks the best choice for modeling source code?},
  year      = {2017},
  isbn      = {9781450351058},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3106237.3106290},
  doi       = {10.1145/3106237.3106290},
  abstract  = {Current statistical language modeling techniques, including deep-learning based models, have proven to be quite effective for source code. We argue here that the special properties of source code can be exploited for further improvements. In this work, we enhance established language modeling approaches to handle the special challenges of modeling source code, such as: frequent changes, larger, changing vocabularies, deeply nested scopes, etc. We present a fast, nested language modeling toolkit specifically designed for software, with the ability to add \& remove text, and mix \& swap out many models. Specifically, we improve upon prior cache-modeling work and present a model with a much more expansive, multi-level notion of locality that we show to be well-suited for modeling software. We present results on varying corpora in comparison with traditional N-gram, as well as RNN, and LSTM deep-learning language models, and release all our source code for public use. Our evaluations suggest that carefully adapting N-gram models for source code can yield performance that surpasses even RNN and LSTM based deep-learning models.},
  booktitle = {Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering},
  pages     = {763â€“773},
  numpages  = {11},
  keywords  = {software tools, naturalness, language models},
  location  = {Paderborn, Germany},
  series    = {ESEC/FSE 2017}
}
@inproceedings{NIPS2017_3f5ee243,
  author    = {Vaswani, Ashish and Shazeer, Noam and Parmar, Niki and Uszkoreit, Jakob and Jones, Llion and Gomez, Aidan N and Kaiser, \L ukasz and Polosukhin, Illia},
  booktitle = {Advances in Neural Information Processing Systems},
  editor    = {I. Guyon and U. Von Luxburg and S. Bengio and H. Wallach and R. Fergus and S. Vishwanathan and R. Garnett},
  pages     = {},
  publisher = {Curran Associates, Inc.},
  title     = {Attention is All you Need},
  url       = {https://proceedings.neurips.cc/paper_files/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf},
  volume    = {30},
  year      = {2017}
}
@inproceedings{6227135,
  author    = {Hindle, Abram and Barr, Earl T. and Su, Zhendong and Gabel, Mark and Devanbu, Premkumar},
  booktitle = {2012 34th International Conference on Software Engineering (ICSE)},
  title     = {On the naturalness of software},
  year      = {2012},
  volume    = {},
  number    = {},
  pages     = {837-847},
  keywords  = {Java;Software;Speech recognition;Entropy;Natural language processing;Computational modeling;language models;n-gram;natural language processing;code completion;code suggestion},
  doi       = {10.1109/ICSE.2012.6227135}
}
ï»¿@article{Liang2022,
  author   = {Liang, Hongliang
              and Hang, Dengji
              and Li, Xiangyu},
  title    = {Modeling function-level interactions for file-level bug localization},
  journal  = {Empirical Software Engineering},
  year     = {2022},
  month    = {Oct},
  day      = {01},
  volume   = {27},
  number   = {7},
  pages    = {186},
  abstract = {Automatic bug localization, i.e., automatically locating potential buggy source files given a bug report, plays an essential role in software engineering. For instance, bug localization helps developers fix bugs quickly. Although information retrieval-based bug localization methods are simple and easy to understand, it is difficult for them to bridge the lexical gap between bug reports and programs and capture the rich structural information in programs. Deep learning-based bug localization (DLBL) methods can utilize the structural information of the program, but they cannot handle long code sequences well. For example, CNN fails to capture remote code interaction features, while RNN (like LSTM, GRU) is vulnerable to gradient disappearance or burst when facing long code sequences. Additionally, DLBL methods fail to model metadata features such as bug-fixing recency and frequency. In this paper, we research how to locate buggy files by learning function-level features. Specifically, we propose a new framework called FLIM that can extract semantic features of a program at the function level and then calculates the relevance between natural and programming language by aggregating function-level interactions. We leverage a fine-tuned language model to treat the bug localization task as a code retrieval task, and use a learning-to-rank model to fuse the function-level semantic features with IR features to calculate the final relevance. We evaluate FLIM by conducting extensive experiments on widely-used six software projects. Experimental results demonstrate that FLIM outperforms six state-of-the-art methods of bug localization.},
  issn     = {1573-7616},
  doi      = {10.1007/s10664-022-10237-z},
  url      = {https://doi.org/10.1007/s10664-022-10237-z}
}
@misc{2020CodeBERT,
  title         = {CodeBERT: A Pre-Trained Model for Programming and Natural Languages},
  author        = {Zhangyin Feng and Daya Guo and Duyu Tang and Nan Duan and Xiaocheng Feng and Ming Gong and Linjun Shou and Bing Qin and Ting Liu and Daxin Jiang and Ming Zhou},
  year          = {2020},
  eprint        = {2002.08155},
  archiveprefix = {arXiv},
  primaryclass  = {cs.CL}
}
@inproceedings{10062428,
  author    = {Chen, Hao and Yang, Haiyang and Yan, Zilun and Kuang, Li and Zhang, Lingyan},
  booktitle = {2022 IEEE 22nd International Conference on Software Quality, Reliability and Security (QRS)},
  title     = {CGMBL: Combining GAN and Method Name for Bug Localization},
  year      = {2022},
  volume    = {},
  number    = {},
  pages     = {231-241},
  keywords  = {Location awareness;Measurement;Computer languages;Codes;Computer bugs;Semantics;Natural languages;Bug Localization;Bug Reports;Adversarial Learning;Deep Learning},
  doi       = {10.1109/QRS57517.2022.00033}
}
@article{https://doi.org/10.1002/smr.2312,
  author   = {Zhang, Zhuo and Lei, Yan and Mao, Xiaoguang and Yan, Meng and Xu, Ling and Wen, Junhao},
  title    = {Improving deep-learning-based fault localization with resampling},
  journal  = {Journal of Software: Evolution and Process},
  volume   = {33},
  number   = {3},
  pages    = {e2312},
  keywords = {fault localization, debugging, neural networks, deep learning, resampling},
  doi      = {https://doi.org/10.1002/smr.2312},
  url      = {https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.2312},
  eprint   = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/smr.2312},
  note     = {e2312 smr.2312},
  abstract = {Abstract Many fault localization approaches recently utilize deep learning to learn an effective localization model showing a fresh perspective with promising results. However, localization models are generally learned from class imbalance datasets; that is, the number of failing test cases is much fewer than passing test cases. It may be highly susceptible to affect the accuracy of learned localization models. Thus, in this paper, we explore using data resampling to reduce the negative effect of the imbalanced class problem and improve the accuracy of learned models of deep-learning-based fault localization. Specifically, for deep-learning-based fault localization, its learning feature may require duplicate essential data to enhance the weak but beneficial experience incurred by the class imbalance datasets. We leverage the property of test cases (i.e., passing or failing) to identify failing test cases as the duplicate essential data and propose an iterative oversampling approach to resample failing test cases for producing a class balanced test suite. We apply the test case resampling to representative localization models using deep learning. Our empirical results on eight large-sized programs with real faults and four large-sized programs with seeded faults show that the test case resampling significantly improves fault localization effectiveness.},
  year     = {2021}
}